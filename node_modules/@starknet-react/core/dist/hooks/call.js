"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useContractRead = void 0;
const react_query_1 = require("@tanstack/react-query");
const react_1 = require("react");
const providers_1 = require("../providers");
const contract_1 = require("./contract");
const invalidate_1 = require("./invalidate");
/**
 * Hook to perform a read-only contract call.
 *
 * @remarks
 *
 * The hook only performs a call if the target `abi`, `address`,
 * `functionName`, and `args` are not undefined.
 *
 * @example
 * This example shows how to fetch the user ERC-20 balance.
 * ```tsx
 * function Component() {
 *   const { address } = useAccount()
 *   const { data, isLoading, error, refetch } = useStarknetCall({
 *     address: ethAddress,
 *     abi: compiledErc20.abi,
 *     functionName: 'balanceOf',
 *     args: [address],
 *     watch: false
 *   })
 *
 *   if (isLoading) return <span>Loading...</span>
 *   if (error) return <span>Error: {error}</span>
 *
 *   return (
 *     <div>
 *       <button onClick={refetch}>Refetch</button>
 *       <p>Balance: {JSON.stringify(data)}</p>
 *     </div>
 *   )
 * }
 * ```
 */
function useContractRead({ abi, address, functionName, args, watch = false, blockIdentifier = 'pending', }) {
    const { library } = (0, providers_1.useStarknet)();
    const { contract } = (0, contract_1.useContract)({ abi, address });
    const queryKey_ = (0, react_1.useMemo)(() => queryKey({ library, args: { contract, functionName, args, blockIdentifier } }), [library, contract, functionName, args, blockIdentifier]);
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const { data, error, isStale: isIdle, isLoading, isFetching, isSuccess, isError, isFetched, isFetchedAfterMount, isRefetching, refetch, status, } = (0, react_query_1.useQuery)(queryKey_, readContract({ args: { contract, functionName, args, blockIdentifier } }));
    (0, invalidate_1.useInvalidateOnBlock)({ enabled: watch, queryKey: queryKey_ });
    return {
        data,
        error: error ?? undefined,
        isIdle,
        isLoading,
        isFetching,
        isSuccess,
        isError,
        isFetched,
        isFetchedAfterMount,
        isRefetching,
        refetch,
        status,
    };
}
exports.useContractRead = useContractRead;
function readContract({ args }) {
    return async () => {
        if (!args.args || !args.contract || !args.functionName)
            return null;
        const call = args.contract && args.functionName && args.contract[args.functionName];
        if (!call)
            return null;
        return await call(...args.args, {
            blockIdentifier: args.blockIdentifier,
        });
    };
}
function queryKey({ library, args }) {
    const { contract, functionName, args: callArgs, blockIdentifier } = args;
    return [
        {
            entity: 'readContract',
            chainId: library.chainId,
            contract: contract?.address,
            functionName,
            args: callArgs,
            blockIdentifier,
        },
    ];
}
//# sourceMappingURL=call.js.map